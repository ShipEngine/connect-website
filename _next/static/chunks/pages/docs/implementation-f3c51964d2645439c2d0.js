(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3413],{3790:function(e,n,t){"use strict";t.r(n),t.d(n,{title:function(){return c},description:function(){return m},createdAt:function(){return d},modifiedAt:function(){return h},default:function(){return g}});var a=t(9016),o=t(3104),r=t(6687),i=t(2320),p=t(1783),s=["components"],c=(r.createElement,"Implementing Your Application's Methods"),m="Learn some tips for implementing your applications methods and mapping your applications's services to what ShipEngine Connect expects",d=new Date(1653338888619.7585),h=new Date(1653338888619.7585),l=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=l("CodeWrapper"),k=l("Pager"),f=function(e){return(0,i.kt)(p.Z,(0,o.Z)({title:"Implementing Your Application's Methods",description:"Learn some tips for implementing your applications methods and mapping your applications's services to what ShipEngine Connect expects",createdAt:new Date(1653338888620),modifiedAt:new Date(1653338888620)},e))};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)(f,(0,o.Z)({},t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{markdown:!0},"Implementing Your Methods"),(0,i.kt)("p",{markdown:!0},"The purpose of developing a ",(0,i.kt)("a",{href:"/docs",markdown:!0,parentName:"p"},"ShipEngine Connect")," application is to provide a communication layer between your backend API or service and our\nsuite of e-commerce solutions where end users can utilize your services. You will provide the integration with your backend API or service when you implement the\nmethods generated by the ",(0,i.kt)("a",{href:"/docs/cli#initialize-a-new-app",markdown:!0,parentName:"p"},(0,i.kt)("inlineCode",{markdown:!0,parentName:"a"},"connect init"),"command"),"."),(0,i.kt)("p",{markdown:!0},"Every ShipEngine Connect application provides methods that correspond to the services offered through the API or service with which you are integrating.\nDuring the course of your application development, you will likely need to map data from your\ndata model to match what ShipEngine Connect expects. Your method will receive data from ShipEngine Connect that it will then need to transform into\nthe required format before passing it along to the backend service or API. Likewise, your backend API or service will return data that will then need to be transformed\ninto the format expected by ShipEngine Connect before returning it from the method."),(0,i.kt)("p",{markdown:!0},"Each method will generally have the following structure and flow:"),(0,i.kt)("ol",{markdown:!0},(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Validate the incoming information from ShipEngine Connect."),(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Map the data passed to your method by ShipEngine Connect to the data structure needed by the backend API or service for which your application provides the integration."),(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Call the the backend API or service for which your application provides the integration."),(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Map the response from your backend API or service to the data structure expected by ShipEngine Connect and return it from the method.")),(0,i.kt)("h2",{markdown:!0},"Example"),(0,i.kt)("p",{markdown:!0},"Let's look at an example implementation of the ",(0,i.kt)("a",{href:"/docs/reference/methods/create-shipment",markdown:!0,parentName:"p"},"createShipment method"),"."),(0,i.kt)("p",{markdown:!0},"The following block of code shows the method taking a ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"shipment")," argument, which is a ",(0,i.kt)("a",{href:"/docs/reference/methods/create-shipment#parameters",markdown:!0,parentName:"p"},"NewShipment")," object, and does the following:"),(0,i.kt)("ol",{markdown:!0},(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Transforms the data passed to the method by ShipEngine Connect into the structure expected by the backend API. For example, the backend API we are calling expects a property called ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"confirmation_code"),".\nWe extract this value from the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"package.deliveryConfirmation.code")," property of the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"shipment")," object that was passed to this method from ShipEngine Connect."),(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Calls the backend API or service. In this example, we are calling a REST API for a carrier service and passing the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"data")," object we created in step 1."),(0,i.kt)("li",{markdown:!0,parentName:"ol"},"Takes the response from the backend API and calls the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"formatShipment")," method to transform the carrier's label creation response into the format that ShipEngine Connect expects. For example, ShipEngine Connect requires\nthe return object to contain a property called ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"trackingNumber")," which we extract from the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"tracking_number")," property of the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"response")," object returned from the backend API call performed in step 2.")),(0,i.kt)(u,{mdxType:"CodeWrapper"},(0,i.kt)("pre",{markdown:!0},(0,i.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { NewShipment, ShipmentConfirmation, Transaction } from "@shipengine/connect";\n\n/**\n * Generates a shipping label and tracking number for a shipment\n */\nexport default async function createShipment(\n  transaction: Transaction<Session>, shipment: NewShipment): Promise<ShipmentConfirmation> {\n\n  // STEP 1: Create the data that the carrier\'s API expects\n  let data: GenerateLabelRequest = {\n    operation: "generate_label",\n    session_id: transaction.session.id,\n    service_code: shipment.deliveryService.code,\n    confirmation_code: shipment.deliveryConfirmation.code,\n    ship_date: shipment.shipDateTime.toISOString(),\n    from_zone: parseInt(shipment.shipFrom.postalCode, 10),\n    to_zone: parseInt(shipment.shipTo.postalCode, 10),\n    total_weight: shipment.package.weight.ounces,\n  };\n\n  // STEP 2: Call the carrier\'s API\n  const response = await apiClient.request<GenerateLabelResponse>({ data });\n\n  // STEP 3: Create the output data that ShipEngine expects\n  return formatShipment(response.data);\n}\n\n/**\n * Formats a shipment in the way ShipEngine expects\n */\nfunction formatShipment(response: GenerateLabelResponse): ShipmentConfirmation {\n  return {\n    trackingNumber: response.tracking_number,\n    deliveryDateTime: response.delivery_date,\n    charges: [\n      {\n        type: ChargeType.Shipping,\n        amount: {\n          value: response.shipment_cost,\n          currency: "USD",\n        }\n      },\n      {\n        type: ChargeType.DeliveryConfirmation,\n        amount: {\n          value: response.confirmation_cost,\n          currency: "USD",\n        }\n      },\n      {\n        type: ChargeType.LocationFee,\n        amount: {\n          value: response.location_cost,\n          currency: "USD",\n        }\n      },\n    ],\n    packages: [{\n      trackingNumber: response.tracking_number,\n      documents: [\n        {\n          name: "Shipping Label",\n          type: DocumentType.Label,\n          size: DocumentSize.Inches4x6,\n          format: DocumentFormat.PDF,\n          data: Buffer.from(response.image, "base64"),\n        }\n      ]\n    }],\n  };\n}\n')),(0,i.kt)("pre",{markdown:!0},(0,i.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'/**\n * Generates a shipping label and tracking number for a shipment\n */\nasync function createShipment(transaction, shipment) {\n\n  // STEP 1: Create the data that the carrier\'s API expects\n  let data = {\n    operation: "generate_label",\n    session_id: transaction.session.id,\n    service_code: shipment.deliveryService.code,\n    confirmation_code: shipment.deliveryConfirmation.code,\n    ship_date: shipment.shipDateTime.toISOString(),\n    from_zone: parseInt(shipment.shipFrom.postalCode, 10),\n    to_zone: parseInt(shipment.shipTo.postalCode, 10),\n    total_weight: shipment.package.weight.ounces,\n  };\n\n  // STEP 2: Call the carrier\'s API\n  const response = await apiClient.request({ data });\n\n  // STEP 3: Create the output data that ShipEngine expects\n  return await formatShipment(response.data);\n}\n\n/**\n * Formats a shipment in the way ShipEngine expects\n */\nasync function formatShipment(response) {\n  return {\n    trackingNumber: response.tracking_number,\n    deliveryDateTime: response.delivery_date,\n    charges: [\n      {\n        type: "shipping",\n        amount: {\n          value: response.shipment_cost,\n          currency: "USD"\n        }\n      },\n      {\n        type: "delivery_confirmation",\n        amount: {\n          value: response.confirmation_cost,\n          currency: "USD"\n        }\n      },\n      {\n        type: "location_fee",\n        amount: {\n          value: response.location_cost,\n          currency: "USD"\n        }\n      },\n    ],\n    packages: [{\n      trackingNumber: response.tracking_number,\n      documents: [\n        {\n          name: "Label",\n          type: "label",\n          size: "letter",\n          data: await downloadLabel(response.image_url),\n        }\n      ]\n    }],\n  };\n}\n\n/**\n * Downloads a label image\n */\nasync function downloadLabel(imageUrl) {\n  let response = await axios.get(imageUrl);\n  return Buffer.from(response.data, "utf-8")\n}\n'))),(0,i.kt)(k,{prev:"/docs/create-first-app",prevTitle:"Creating Your First App",next:"/docs/typescript",nextTitle:"Developing in TypeScript",mdxType:"Pager"}))}g.isMDXComponent=!0},2075:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/implementation",function(){return t(3790)}])}},function(e){e.O(0,[1783,2888,9774,179],(function(){return n=2075,e(e.s=n);var n}));var n=e.O();_N_E=n}]);