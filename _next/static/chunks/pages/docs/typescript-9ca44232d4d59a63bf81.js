(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8619],{5281:function(e,t,n){"use strict";n.r(t),n.d(t,{title:function(){return d},description:function(){return m},createdAt:function(){return l},modifiedAt:function(){return u},default:function(){return h}});var a,o=n(9016),i=n(3104),r=n(6687),p=n(2320),c=n(1783),s=["components"],d=(r.createElement,"Developing in TypeScript"),m="Learn about TypeScript best practices for building ShipEngine Connect apps",l=new Date(1653338888623.7585),u=new Date(1653338888623.7585),k=(a="Pager",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,p.kt)("div",e)}),w=function(e){return(0,p.kt)(c.Z,(0,i.Z)({title:"Developing in TypeScript",description:"Learn about TypeScript best practices for building ShipEngine Connect apps",createdAt:new Date(1653338888624),modifiedAt:new Date(1653338888624)},e))};function h(e){var t=e.components,n=(0,o.Z)(e,s);return(0,p.kt)(w,(0,i.Z)({},n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{markdown:!0},"Developing in TypeScript"),(0,p.kt)("p",{markdown:!0},(0,p.kt)("a",{href:"/docs",markdown:!0,parentName:"p"},"ShipEngine Connect")," gives you the flexibility to develop your integration application in either TypeScript or JavasScript as long as it matches the required ",(0,p.kt)("a",{href:"/docs/structure",markdown:!0,parentName:"p"},"application structure"),"."),(0,p.kt)("p",{markdown:!0},(0,p.kt)("a",{href:"https://www.npmjs.com/package/@shipengine/connect",markdown:!0,parentName:"p"},"The ",(0,p.kt)("inlineCode",{markdown:!0,parentName:"a"},"@shipengine/connect")," NPM package")," is written in TypeScript and provides type definitions to help you build your app more easily. Many editors, such as ",(0,p.kt)("a",{href:"https://code.visualstudio.com/",markdown:!0,parentName:"p"},"VSCode")," and ",(0,p.kt)("a",{href:"https://www.jetbrains.com/webstorm/",markdown:!0,parentName:"p"},"WebStorm"),", will automatically detect our type definitions and provide you with auto-completion and intellisense functionality \u2014 sometimes even if you're writing plain JavaScript."),(0,p.kt)("p",{markdown:!0},"When you run ",(0,p.kt)("a",{href:"/docs/cli#initialize-a-new-app",markdown:!0,parentName:"p"},"the ",(0,p.kt)("inlineCode",{markdown:!0,parentName:"a"},"connect init")," command")," to ",(0,p.kt)("a",{href:"/docs/create-first-app",markdown:!0,parentName:"p"},"create a new app"),", you'll have the option of selecting JavaScript or TypeScript. Selecting TypeScript will generate ",(0,p.kt)("inlineCode",{markdown:!0,parentName:"p"},".ts")," files that import the necessary type definitions from our NPM package. It will also create a ",(0,p.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html",markdown:!0,parentName:"p"},(0,p.kt)("inlineCode",{markdown:!0,parentName:"a"},"tsconfig.json")),", which allows you to adjust TypeScript's settings."),(0,p.kt)("h2",{markdown:!0},"Build Step Required"),(0,p.kt)("p",{markdown:!0},"You will need to build your TypeScript before running commands such as ",(0,p.kt)("inlineCode",{markdown:!0,parentName:"p"},"connect test")," or ",(0,p.kt)("inlineCode",{markdown:!0,parentName:"p"},"connect publish")," to ensure that the command is using your latest code. To make this easier, we add the following scripts to your ",(0,p.kt)("inlineCode",{markdown:!0,parentName:"p"},"package.json")," file:"),(0,p.kt)("ul",{markdown:!0},(0,p.kt)("li",{markdown:!0,parentName:"ul"},(0,p.kt)("p",{markdown:!0,parentName:"li"},(0,p.kt)("strong",{markdown:!0,parentName:"p"},"build"),(0,p.kt)("br",null),'\nThe "build" script compiles your TypeScript code to JavaScript so ShipEngine Connect can run it. You can run this script via ',(0,p.kt)("inlineCode",{markdown:!0,parentName:"p"},"npm run build"),". You can also customize the build script however you need, such as passing options to the compiler or add pre-build or post-build steps.")),(0,p.kt)("li",{markdown:!0,parentName:"ul"},(0,p.kt)("p",{markdown:!0,parentName:"li"},(0,p.kt)("strong",{markdown:!0,parentName:"p"},"watch"),(0,p.kt)("br",null),'\nThe "watch" script runs the TypeScript compiler in ',(0,p.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/configuring-watch.html",markdown:!0,parentName:"p"},'"watch mode"'),", which automatically detects source code changes and does a fast,\ndifferential rebuild. Note that you'll need to leave your terminal window running, and you'll need to open a new terminal window to perform any other commands, such as ",(0,p.kt)("a",{href:"/docs/cli#test-your-app",markdown:!0,parentName:"p"},(0,p.kt)("inlineCode",{markdown:!0,parentName:"a"},"connect test")),"."))),(0,p.kt)(k,{prev:"/docs/implementation",prevTitle:"Implementing Your Methods",next:"/docs/environment-variables",nextTitle:"Managing Environment Variables",mdxType:"Pager"}))}h.isMDXComponent=!0},4325:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/typescript",function(){return n(5281)}])}},function(e){e.O(0,[1783,2888,9774,179],(function(){return t=4325,e(e.s=t);var t}));var t=e.O();_N_E=t}]);