(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4066],{1505:function(e,t,n){"use strict";n.r(t),n.d(t,{title:function(){return m},description:function(){return c},tags:function(){return d},createdAt:function(){return l},modifiedAt:function(){return u},default:function(){return k}});var a=n(9016),o=n(3104),r=n(6687),i=n(2320),p=n(1783),s=["components"],m=(r.createElement,"Beta"),c="This describes the new application types",d=["ShipEngine Connect"],l=new Date(1653338063533.9841),u=new Date(1653338063533.9841),h=function(e){return(0,i.kt)(p.Z,(0,o.Z)({title:"Beta",description:"This describes the new application types",tags:["ShipEngine Connect"],createdAt:new Date(1653338063534),modifiedAt:new Date(1653338063534)},e))};function k(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)(h,(0,o.Z)({},n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{markdown:!0},"Connect Apps 2.0 Beta"),(0,i.kt)("p",{markdown:!0},"In an attempt to bridge the disconnect between our existing platform API's and ShipEngine Connect Integrators we are changing the shape of Connect Apps and how they function."),(0,i.kt)("h2",{markdown:!0},"Getting Started"),(0,i.kt)("p",{markdown:!0},"After upgrading your @shipengine/connect to at least ",(0,i.kt)("strong",{markdown:!0,parentName:"p"},"1.12.0")," using the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"npm install -g @shipengine/connect"),", you now have access to a new flag for the init command ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"connect init --beta"),".\nThis will walk you through a similar process as the connect init command but will generate the brand new template."),(0,i.kt)("p",{markdown:!0},"These new application types contain both the runtime & the domain specific library needed for your app to run (Order Source/Carrier). The hope is that you will have a normal JavaScript/TypeScript development lifecycle while working on these projects using familiar commands like ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"npm start"),", ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"npm run-script build"),", ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"npm test")," to work on your project locally."),(0,i.kt)("h2",{markdown:!0},"Project Structure"),(0,i.kt)("p",{markdown:!0},"The main entry point of your project should export an app object of the corresponding type, there will also be a serve file which will act as the runtime starting your application server.\nSince the main export is an app object you are free to define the methods and metadata for your project anyway you please, but examples are available in the shipengine connect repository for how we would structure these application ",(0,i.kt)("a",{href:"https://github.com/ShipEngine/connect/tree/master/samples/carrier-api",markdown:!0,parentName:"p"},"Carrier"),", ",(0,i.kt)("a",{href:"https://github.com/ShipEngine/connect/tree/master/samples/order-source",markdown:!0,parentName:"p"},"Order Source"),"."),(0,i.kt)("h2",{markdown:!0},"API Documentation"),(0,i.kt)("p",{markdown:!0},(0,i.kt)("a",{href:"https://shipstation.github.io/integrations-shipping/carrierapi-redoc.html",markdown:!0,parentName:"p"},"Carrier API Reference")),(0,i.kt)("p",{markdown:!0},"Using the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"npm start")," command will bring up a locally running server (port 3005 by default), going to ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"localhost:3005/docs")," will bring up the documentation associated with your application type."),(0,i.kt)("h2",{markdown:!0},"App Definition Documentation"),(0,i.kt)("p",{markdown:!0},"The metadata associated with an app is used to drive behavior in our products and is what our customers see.\nYou can learn more about the metadata associated with your app type at the following links."),(0,i.kt)("ul",{markdown:!0},(0,i.kt)("li",{markdown:!0,parentName:"ul"},(0,i.kt)("a",{href:"/docs/beta/app-definition/carrier",markdown:!0,parentName:"li"},"Carrier")),(0,i.kt)("li",{markdown:!0,parentName:"ul"},(0,i.kt)("a",{href:"/docs/beta/app-definition/order-source",markdown:!0,parentName:"li"},"Order Source"))),(0,i.kt)("h2",{markdown:!0},"Testing"),(0,i.kt)("p",{markdown:!0},"There are a few ways to test your application."),(0,i.kt)("ul",{markdown:!0},(0,i.kt)("li",{markdown:!0,parentName:"ul"},"Install a testing framework like ",(0,i.kt)("a",{href:"https://jestjs.io/",markdown:!0,parentName:"li"},"Jest"),", ",(0,i.kt)("a",{href:"https://mochajs.org/",markdown:!0,parentName:"li"},"Mocha"),", etc and write local unit tests"),(0,i.kt)("li",{markdown:!0,parentName:"ul"},"Run ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"npm start")," and hit your module locally using something like ",(0,i.kt)("a",{href:"https://www.postman.com/",markdown:!0,parentName:"li"},"Postman")),(0,i.kt)("li",{markdown:!0,parentName:"ul"},"Run the ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"li"},"connect publish")," command and test your application in the ShipEngine Connect ShipStation Development Environment")),(0,i.kt)("p",{markdown:!0},"A helpful tip is to publish your application to the development environment to test out the expected functionality and then do a ",(0,i.kt)("inlineCode",{markdown:!0,parentName:"p"},"connect logs")," to get request response logs from your module, and then use those requests to create unit tests or postman requests for local trouble shooting."))}k.isMDXComponent=!0},7890:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/beta",function(){return n(1505)}])}},function(e){e.O(0,[1783,2888,9774,179],(function(){return t=7890,e(e.s=t);var t}));var t=e.O();_N_E=t}]);