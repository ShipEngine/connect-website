(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4080],{1022:function(e,r,t){"use strict";t.r(r),t.d(r,{title:function(){return d},description:function(){return m},createdAt:function(){return c},modifiedAt:function(){return h},default:function(){return b}});var n=t(9016),a=t(3104),o=t(6687),s=t(2320),i=t(1783),p=["components"],d=(o.createElement,"Error Handling"),m="ShipEngine Connect applications can throw errors just like any other JavaScript application. We also support custom error properties and classes to make things easier.",c=new Date(1653338063537.9844),h=new Date(1653338063537.9844),l=function(e){return function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",r)}},k=l("Section"),u=l("Left"),w=l("Reference"),g=l("Field"),y=l("Description"),x=l("Type"),T=l("Right"),f=l("CodeWrapper"),E=l("Pager"),N=function(e){return(0,s.kt)(i.Z,(0,a.Z)({title:"Error Handling",description:"ShipEngine Connect applications can throw errors just like any other JavaScript application. We also support custom error properties and classes to make things easier.",createdAt:new Date(1653338063538),modifiedAt:new Date(1653338063538)},e))};function b(e){var r=e.components,t=(0,n.Z)(e,p);return(0,s.kt)(N,(0,a.Z)({},t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{markdown:!0},"Error Handling"),(0,s.kt)("p",{markdown:!0},(0,s.kt)("a",{href:"/docs",markdown:!0,parentName:"p"},"ShipEngine Connect")," applications can throw ",(0,s.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",markdown:!0,parentName:"p"},"Errors")," just like any other JavaScript application.  Any uncaught exception will terminate the currently executing method and generate an error log."),(0,s.kt)("p",{markdown:!0},"For example, the methods you implement will often need to perform input validation. If this validation fails, you can throw an error as in the example below."),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",metastring:"highlight=3",highlight:"3",markdown:!0,parentName:"pre"},'for (let parcel of shipment.packages) {\n  if (parcel.packaging.code === "BOX" && parcel.weight.grams > 100000) {\n    throw new RangeError(`${parcel.packaging.name} cannot weigh more than 100 kilograms`);\n  }\n}\n')),(0,s.kt)(k,{mdxType:"Section"},(0,s.kt)(u,{mdxType:"Left"},(0,s.kt)("h2",{markdown:!0},"Additional Error Properties"),(0,s.kt)("p",{markdown:!0},"Before throwing an error, you can set additional properties that provide more context, enabling our platform to respond appropriately and provide meaningful feedback to users."),(0,s.kt)(w,{mdxType:"Reference"},(0,s.kt)(g,{name:"code",type:"string",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"A string that identifies the type of error. Most errors that occur in Node.js already have a code, but if you're throwing a new error, then we recommend that you use one of our pre-defined ",(0,s.kt)("a",{href:"#error-codes",markdown:!0,parentName:"p"},"Error Codes")," below"))),(0,s.kt)(g,{name:"statusCode",type:"number",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"The numeric status code associated with the error, if any. For errors that originate from an HTTP response, this should be the HTTP status code (e.g. 400, 404, 500)"))),(0,s.kt)(g,{name:"externalErrors",type:"string[]",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"If the error is the result of calling an external service, then put any error messages that were returned by the service here."))),(0,s.kt)(g,{name:"externalWarnings",type:"string[]",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"If the error is the result of calling an external service, then put any warning messages that were returned by the service here."))),(0,s.kt)(g,{name:"originalError",mdxType:"Field"},(0,s.kt)(x,{mdxType:"Type"},(0,s.kt)("p",{markdown:!0},(0,s.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",markdown:!0,parentName:"p"},"Error"))),(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"The original error that occurred, if any. This is especially useful for debugging, since it will allow you to see the error message and stack trace where the problem occurred."))),(0,s.kt)(g,{name:"*",type:"any value",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"Any additional properties you add to the error will be logged, which is useful for debugging.")))),(0,s.kt)("h2",{markdown:!0},"Error Codes"),(0,s.kt)("p",{markdown:!0},"Most errors that occur in Node.js have a ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"code")," property. When throwing your own errors, we encourage you to include a ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"code")," as well. Using one of the following codes will help the ShipEngine Connect platform know how to handle your error appropriately."),(0,s.kt)(w,{mdxType:"Reference"},(0,s.kt)(g,{name:"ERR_INVALID",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"You should use this code to indicate a validation error. For example, your app may only allow certain values under specific conditions, or a field may be conditionally required."))),(0,s.kt)(g,{name:"ERR_UNAUTHORIZED",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"Use this code to indicate an authentication or authorization error. For example, if the ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"transaction.session")," object is missing some required data or the session has expired."))),(0,s.kt)(g,{name:"ERR_EXTERNAL",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"You should use this code for any error that is the result of calling an external service, such as an API. This lets ShipEngine Connect know that the error came from a downstream service rather than directly in your app."),(0,s.kt)("p",{markdown:!0},"You should also set the ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"statusCode")," property if possible to indicate the type of external error that occurred. For HTTP errors, you can use the HTTP status code (e.g. 400, 404, 500). For APIs that don't use HTTP status codes, we recomend using the most appropriate ",(0,s.kt)("a",{href:"https://httpstatuses.com/",markdown:!0,parentName:"p"},"HTTP status code")," and also put the raw error/warning messages in ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"externalErrors")," or ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"externalWarnings"),"."))),(0,s.kt)(g,{name:"ERR_APP_ERROR",mdxType:"Field"},(0,s.kt)(y,{mdxType:"Description"},(0,s.kt)("p",{markdown:!0},"This is a generic error code that simply indicates that the error was ",(0,s.kt)("em",{markdown:!0,parentName:"p"},"intentionally")," thrown by your app, as opposed to an unexpected error that occurred due to a bug or runtime exception."))))),(0,s.kt)(T,{mdxType:"Right"},(0,s.kt)("h3",{markdown:!0},"Validation Error Example"),(0,s.kt)("p",{markdown:!0},"This example demonstrates throwing a validation error with additional properties."),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'if (package.weight.grams > 100000) {\n  throw Object.assign(\n    new Error("Weight cannot exceed 100 kilograms"),\n    {\n      code: "ERR_INVALID",\n      actualWeight: package.weight.grams,\n      maxWeight: 100000,\n    }\n  );\n}\n')),(0,s.kt)("h3",{markdown:!0},"External Error Example"),(0,s.kt)("p",{markdown:!0},"This example rethrows an error from an external service, but first it adds additional properties."),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'try {\n  // Some code that makes an HTTP call\n}\ncatch (error) {\n  error.code = "ERR_EXTERNAL";\n  error.statusCode = httpResponse.status;\n  error.externalErrors = [httpResponse.body.errorMessage];\n  error.headers = httpResponse.headers;\n  throw error;\n}\n')))),(0,s.kt)("h2",{markdown:!0},"Error Classes"),(0,s.kt)("p",{markdown:!0},"In addition to ",(0,s.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#Error_objects",markdown:!0,parentName:"p"},"JavaScript's built-in error classes"),", ShipEngine Connect includes several ",(0,s.kt)("a",{href:"#error-classes",markdown:!0,parentName:"p"},"error classes")," you can use in your app. Each class corresponds to one of the ",(0,s.kt)("a",{href:"#error-codes",markdown:!0,parentName:"p"},"error codes")," listed above and automatically sets the ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"code")," property for you. You can also pass ",(0,s.kt)("a",{href:"#additional-error-properties",markdown:!0,parentName:"p"},"additional error properties")," to the constructor."),(0,s.kt)(k,{mdxType:"Section"},(0,s.kt)(u,{mdxType:"Left"},(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"ValidationError")),(0,s.kt)("p",{markdown:!0},"You should use this class for validation errors. For example, your app may only allow certain values under specific conditions, or a field may be conditionally required."),(0,s.kt)("h4",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h4"},"constructor(message | props)")),(0,s.kt)("p",{markdown:!0},"The ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"ValidationError")," constructor can accept a string (the error message) or an object containing ",(0,s.kt)("a",{href:"#additional-error-properties",markdown:!0,parentName:"p"},"additional error properties"),".")),(0,s.kt)(T,{mdxType:"Right"},(0,s.kt)(f,{mdxType:"CodeWrapper"},(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'const { ValidationError } = require("@shipengine/connect");\n\n// This only sets the `code` and `message` properties\nthrow new ValidationError("The package weight exceeds the maximum allowed");\n\n// This sets the `code`, `message`, and additional properties\nthrow new ValidationError({\n  message: "The package weight exceeds the maximum allowed",\n  actualWeight: package.weight.ounces,\n  maxWeight: 2400,\n});\n')),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { ValidationError } from "@shipengine/connect";\n\n// This only sets the `code` and `message` properties\nthrow new ValidationError("The package weight exceeds the maximum allowed");\n\n// This sets the `code`, `message`, and additional properties\nthrow new ValidationError({\n  message: "The package weight exceeds the maximum allowed",\n  actualWeight: package.weight.ounces,\n  maxWeight: 2400,\n});\n'))))),(0,s.kt)(k,{mdxType:"Section"},(0,s.kt)(u,{mdxType:"Left"},(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"UnauthorizedError")),(0,s.kt)("p",{markdown:!0},"You should use this class to indicate an authentication or authorization error. For example, if the ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"transaction.session")," object is missing some required data or the session has expired."),(0,s.kt)("h4",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h4"},"constructor(message | props)")),(0,s.kt)("p",{markdown:!0},"The ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"UnauthorizedError")," constructor can accept a string (the error message) or an object containing ",(0,s.kt)("a",{href:"#additional-error-properties",markdown:!0,parentName:"p"},"additional error properties"),".")),(0,s.kt)(T,{mdxType:"Right"},(0,s.kt)(f,{mdxType:"CodeWrapper"},(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'const { UnauthorizedError } = require("@shipengine/connect");\n\n// This only sets the `code` and `message` properties\nthrow new UnauthorizedError("Your session has expired");\n\n// This sets the `code`, `message`, and additional properties\nthrow new UnauthorizedError({\n  message: "Your session has expired",\n  sessionID: session.id,\n  expiredAt: ession.expireDateTime,\n});\n')),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { UnauthorizedError } from "@shipengine/connect";\n\n// This only sets the `code` and `message` properties\nthrow new UnauthorizedError("Your session has expired");\n\n// This sets the `code`, `message`, and additional properties\nthrow new UnauthorizedError({\n  message: "Your session has expired",\n  sessionID: session.id,\n  expiredAt: ession.expireDateTime,\n});\n'))))),(0,s.kt)(k,{mdxType:"Section"},(0,s.kt)(u,{mdxType:"Left"},(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"ExternalError")),(0,s.kt)("p",{markdown:!0},"You should use this class when the error is the result of calling an external service, such as an API. This lets ShipEngine Connect know that the error came from a downstream service rather than directly in your app."),(0,s.kt)("p",{markdown:!0},"You should also set the ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"statusCode")," property if possible to indicate the type of external error that occurred. For HTTP errors, you can use the HTTP status code (e.g. 400, 404, 500). For APIs that don't use HTTP status codes, we recomend using the most appropriate ",(0,s.kt)("a",{href:"https://httpstatuses.com/",markdown:!0,parentName:"p"},"HTTP status code")," and also put the raw error/warning messages in ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"externalErrors")," or ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"externalWarnings"),"."),(0,s.kt)("h4",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h4"},"constructor(message | props)")),(0,s.kt)("p",{markdown:!0},"The ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"ExternalError")," constructor can accept a string (the error message) or an object containing ",(0,s.kt)("a",{href:"#additional-error-properties",markdown:!0,parentName:"p"},"additional error properties"),".")),(0,s.kt)(T,{mdxType:"Right"},(0,s.kt)(f,{mdxType:"CodeWrapper"},(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'const { ExternalError } = require("@shipengine/connect");\n\n// This only sets the `code` and `message` properties\nthrow new ExternalError("The request exceeded the rate limit");\n\n// This sets the `code`, `message`, and additional properties\nthrow new ExternalError({\n  message: "The request exceeded the rate limit",\n  statusCode: 429,\n  externalErrors: [httpResponse.body.errorMessage],\n});\n')),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { ExternalError } from "@shipengine/connect";\n\n// This only sets the `code` and `message` properties\nthrow new ExternalError("The request exceeded the rate limit");\n\n// This sets the `code`, `message`, and additional properties\nthrow new ExternalError({\n  message: "The request exceeded the rate limit",\n  statusCode: 429,\n  externalErrors: [httpResponse.body.errorMessage],\n});\n'))))),(0,s.kt)(k,{mdxType:"Section"},(0,s.kt)(u,{mdxType:"Left"},(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"AppError")),(0,s.kt)("p",{markdown:!0},"This is a generic error class that simply distinguishes errors that are ",(0,s.kt)("em",{markdown:!0,parentName:"p"},"intentionally")," thrown by your app, as opposed to an unexpected error that occurred due to a bug or runtime exception."),(0,s.kt)("h4",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h4"},"constructor(message | props)")),(0,s.kt)("p",{markdown:!0},"The ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"AppError")," constructor can accept a string (the error message) or an object containing ",(0,s.kt)("a",{href:"#additional-error-properties",markdown:!0,parentName:"p"},"additional error properties"),".")),(0,s.kt)(T,{mdxType:"Right"},(0,s.kt)(f,{mdxType:"CodeWrapper"},(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},'const { AppError } = require("@shipengine/connect");\n\n// This only sets the `code` and `message` properties\nthrow new AppError("Unable to load app data");\n\n// This sets the `code`, `message`, and additional properties\nthrow new AppError({\n  message: "Unable to load app data",\n  dataSource: "./app-data.xml",\n});\n')),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { AppError } from "@shipengine/connect";\n\n// This only sets the `code` and `message` properties\nthrow new AppError("Unable to load app data");\n\n// This sets the `code`, `message`, and additional properties\nthrow new AppError({\n  message: "Unable to load app data",\n  dataSource: "./app-data.xml",\n});\n'))))),(0,s.kt)(E,{prev:"/docs/typescript",prevTitle:"Developing in TypeScript",next:"/docs/testing",nextTitle:"Testing",mdxType:"Pager"}))}b.isMDXComponent=!0},4264:function(e,r,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/error-handling",function(){return t(1022)}])}},function(e){e.O(0,[1783,2888,9774,179],(function(){return r=4264,e(e.s=r);var r}));var r=e.O();_N_E=r}]);