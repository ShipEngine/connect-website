(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2359],{76:function(n,e,t){"use strict";t.r(e),t.d(e,{title:function(){return p},description:function(){return m},createdAt:function(){return u},modifiedAt:function(){return l},default:function(){return w}});var a,o=t(9016),r=t(3104),i=t(6687),s=t(2320),c=t(1783),d=["components"],p=(i.createElement,"connect Method"),m="This method is used to authenticate with your application.",u=new Date(1653338888623.7585),l=new Date(1653338888623.7585),h=(a="CodeWrapper",function(n){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",n)}),k=function(n){return(0,s.kt)(c.Z,(0,r.Z)({title:"connect Method",description:"This method is used to authenticate with your application.",createdAt:new Date(1653338888624),modifiedAt:new Date(1653338888624)},n))};function w(n){var e=n.components,t=(0,o.Z)(n,d);return(0,s.kt)(k,(0,r.Z)({},t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h1"},"connect()")),(0,s.kt)("p",{markdown:!0},"This method is used to authenticate with your application. It is responsible for verifying the supplied user credentials and establishing or\nrenewing a session. This session will be stored in the ",(0,s.kt)("a",{href:"/docs/reference/transaction",markdown:!0,parentName:"p"},(0,s.kt)("inlineCode",{markdown:!0,parentName:"a"},"transaction"))," object and will be passed as an argument in every subsequent method call.\nAll applications must implement the connect method."),(0,s.kt)("h2",{markdown:!0},"Syntax"),(0,s.kt)(h,{mdxType:"CodeWrapper"},(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},"module.exports = async function connect(transaction, connectionFormData) {\n  // Your code here\n}\n")),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { Transaction } from "@shipengine/connect";\n\nexport default async function connect(\n  transaction: Transaction,\n  connectionFormData: object\n): Promise<void> {\n  // Your code here\n}\n'))),(0,s.kt)("h2",{markdown:!0},"Parameters"),(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"transaction")),(0,s.kt)("p",{markdown:!0},"A ",(0,s.kt)("a",{href:"/docs/reference/transaction",markdown:!0,parentName:"p"},"transaction object")," containing information about the transaction and session state."),(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"connectionFormData")),(0,s.kt)("p",{markdown:!0},"The ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"connectionFormData")," parameter is an object containing the authentication information gathered using the ",(0,s.kt)("a",{href:"/docs/reference/forms",markdown:!0,parentName:"p"},"connection form")," you created for your application.\nIt will contain whatever fields you defined in this form. Your method must then use this data to perform authentication with your backend service."),(0,s.kt)("h2",{markdown:!0},"Return Value"),(0,s.kt)("h3",{markdown:!0},(0,s.kt)("inlineCode",{markdown:!0,parentName:"h3"},"void")),(0,s.kt)("p",{markdown:!0},"The ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"connect")," method does not return a value. Instead, the data that is returned in the response from calling your backend\nservice is used to create a ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"session")," object that is stored in the ",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"transaction")," object that was passed as a parameter. This\n",(0,s.kt)("inlineCode",{markdown:!0,parentName:"p"},"transaction")," object will then be passed to every subsequent call to your application to enable your application."),(0,s.kt)("h2",{markdown:!0},"Example"),(0,s.kt)(h,{mdxType:"CodeWrapper"},(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-javascript",markdown:!0,parentName:"pre"},"module.exports = async function connect(transaction, connectionFormData) {\n  // STEP 1: Validation\n  if (!connectionFormData.agree_to_eula) {\n    throw new Error(`You must agree to the terms and conditions`);\n  }\n\n  // STEP 2: Create the data that the carrier's API expects\n  let data = {\n    operation: \"authenticate\",\n    account_id: connectionFormData.account_id,\n    account_email: connectionFormData.account_email,\n    account_password: connectionFormData.account_password,\n    agree_to_eula: connectionFormData.agree_to_eula,\n    eula: connectionFormData.eula,\n  };\n\n  // STEP 3: Call the carrier's API\n  const response = await apiClient.request({ data });\n\n  // STEP 4: Store session data in the transaction.session property,\n  // which is persisted across all method calls\n  transaction.session = {\n    id: response.data.id,\n    ip: response.data.ip,\n    created: response.data.created,\n    language: response.data.language,\n  };\n}\n")),(0,s.kt)("pre",{markdown:!0},(0,s.kt)("code",{className:"language-typescript",markdown:!0,parentName:"pre"},'import { Transaction } from "@shipengine/connect";\nimport { Session } from "./session";\n\ninterface ConnectionFormData {\n  account_id: string;\n  account_email: string;\n  account_password: string;\n  agree_to_eula: boolean;\n  eula: string;\n}\n\n/**\n * Logs in using the username and password entered on the login form\n */\nexport default async function connect(\n  transaction: Transaction<Session>, connectionFormData: ConnectionFormData): Promise<void> {\n\n  // STEP 1: Validation\n  if (!connectionFormData.agree_to_eula) {\n    throw new Error(`You must agree to the terms and conditions`);\n  }\n\n  // STEP 2: Create the data that the carrier\'s API expects\n  let data: AuthenticateRequest = {\n    operation: "authenticate",\n    ...connectionFormData,\n  };\n\n  // STEP 3: Call the carrier\'s API\n  const response = await apiClient.request<AuthenticateResponse>({ data });\n\n  // STEP 4: Store session data in the transaction.session property,\n  // which is persisted across all method calls\n  transaction.session = {\n    id: response.data.id,\n    ip: response.data.ip,\n    created: response.data.created,\n    language: response.data.language,\n  };\n}\n'))))}w.isMDXComponent=!0},1240:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/reference/methods/connect",function(){return t(76)}])}},function(n){n.O(0,[1783,2888,9774,179],(function(){return e=1240,n(n.s=e);var e}));var e=n.O();_N_E=e}]);