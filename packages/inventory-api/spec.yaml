openapi: 3.0.0
info:
  title: Inventory API
  description: API specification for Inventory Apps in ShipEngine Connect.
  version: 0.1.0

paths:
  # ----------------------------
  # ---- Fetch Inventory -------
  # ----------------------------

  /fetch:
    post:
      summary: Start an inventory fetch operation
      operationId: StartFetchOperation
      description: |
        Start a fetch operation with the inventory provider.
      tags:
        - Fetch Inventory
      requestBody:
        description: |
          - For a full inventory fetch, send no request body
          - For a partial fetch only for the given SKUs, provide an array of `skus`
          - For a delta fetch only for inventory levels changed since the given date, provide a `sinceDate`
          
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - $ref:  "#/components/schemas/FetchInventoryBySku"
                - $ref:  "#/components/schemas/FetchInventoryByDate"

            examples:
              full_fetch:
                summary: Full fetch – fetch all inventory from the inventory source.
                value: {}
              by_sku:
                summary: Partial fetch – only get inventory for the given SKUs.
                value:
                  skus: [shirt,shoes,mug]
              by_date:
                summary: Delta fetch – only get inventory changed since the given date.
                value:
                  sinceDate: 2021-01-01T08:30:00+0000
            
      responses:
        201:
          $ref: "#/components/responses/OperationReady"
        202:
          $ref: "#/components/responses/OperationProcessing"
        '4XX':
          $ref:  "#/components/responses/ErrorResponse"
        '501':
          $ref:  "#/components/responses/NotSupportedResponse"
        '5XX':
          $ref:  "#/components/responses/ErrorResponse"

  /fetch/{cursor}:
    get:
      summary: Get results from fetch operations
      description: |
        Get results from a completed fetch operation, or scrub through multiple pages of results.
        
      tags:
        - Fetch Inventory
      parameters:
        - in: path
          required: true
          name: cursor
          schema:
            $ref: '#/components/schemas/Cursor'
      responses:
        '200':
          $ref:  "#/components/responses/FetchResults"
        '4XX':
          $ref:  "#/components/responses/ErrorResponse"
        '501':
          $ref:  "#/components/responses/NotSupportedResponse"
        '5XX':
          $ref:  "#/components/responses/ErrorResponse"

  # ----------------------------
  # ---- Push Inventory --------
  # ----------------------------

  /push:
    post:
      summary: Start an inventory push operation
      operationId: StartPushOperation
      description: |
        Start a push operation with the inventory provider.
      tags:
        - Push Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/InventoryItemBase"
      responses:
        201:
          $ref: "#/components/responses/OperationReady"
        202:
          $ref: "#/components/responses/OperationProcessing"
        '4XX':
          $ref:  "#/components/responses/ErrorResponse"
        '501':
          $ref:  "#/components/responses/NotSupportedResponse"
        '5XX':
          $ref:  "#/components/responses/ErrorResponse"

  /push/{cursor}:
    get:
      summary: Get results from push operations
      description: |
        Get results from a completed push operation, or scrub through multiple pages of results.
        
      tags:
        - Push Inventory
      parameters:
        - in: path
          required: true
          name: cursor
          schema:
            $ref: '#/components/schemas/Cursor'
      responses:
        '200':
          $ref:  "#/components/responses/PushResults"
        '4XX':
          $ref:  "#/components/responses/ErrorResponse"
        '501':
          $ref:  "#/components/responses/NotSupportedResponse"
        '5XX':
          $ref:  "#/components/responses/ErrorResponse"

# ----------------------
# ---- Security --------
# ----------------------

security:
  - RequestAuth: []

# ----------------------
# ---- Components ------
# ----------------------

components:
  securitySchemes:
    RequestAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        This header – a base64-encoded string – must be applied with every request. Inventory Apps expect to decode this header
        into an object containing auth credentials for the 3rd-party API that serves as the inventory source / provider.

        ### Generating this key:

        Clients should start with a `credentials` object containing auth information for the inventory source.
        *Documentation is forthcoming* on the expected starting shape of `credentials` for various inventory sources.
        From there, simply stringify the object to JSON, and base64-encode it.

  schemas:
    Cursor:
      description: An opaque string which should be passed back in the next request – for paging / polling.
      type: string
      example: cGFnZTozMDo6cGVyX3BhZ2U6NTAw

    DateTime:
      type: string
      description: Reusable schema for any serialized date-time string
      format: date-time
      example: 2021-01-01T08:30:00+0000

    # -------------------------
    # --- Inventory models ----
    # -------------------------

    SkuIdentifiers:
      type: array
      description: A list of SKU identifiers, corresponding to specific products
      example: ['t-shirt', 'mug', 'bouncy-ball']
      items:
        type: string

    InventoryItemBase:
      type: object
      description: Common / shared properties for InventoryItems, regardless of whether receiving data (fetch) or sending it (push) 
      required:
        - sku
        - integration_entity_id
        - available_quantity
      properties:
        sku:
          type: string
          example: t-shirt-small-red
          description: The merchant-supplied identifier for the product.
        integration_entity_id:
          type: string
          example: t-shirt-small-red
          description: The unique inventory record in the *source* system. This will often be the same as the SKU, but could be different in inventory source platforms that allow duplicate SKUs.
        fetched_at:
          type: string
          description: DateTime representing when these inventory quantities were fetched from the source.
          format: date-time
          example: 2021-01-01T08:30:00+0000
        updated_at:
          type: string
          description: DateTime representing when these inventory quantities were last updated at the source (if available).
          format: date-time
          example: 2021-01-01T08:15:00+0000
        available_quantity:
          type: integer
          example: 15
        allocated_quantity:
          type: integer
          example: 2
        onhand_quantity:
          type: integer
          example: 5
        committed_quantity:
          type: integer
          example: 1
      example:
        sku: t-shirt-small-red
        integration_entity_id: t-shirt-small-red
        fetched_at: 2021-01-01T08:30:00+0000
        updated_at: 2021-01-01T08:20:00+0000
        available_quantity: 20
        allocated_quantity: 2

    InventoryFetchItem:
      description: The reported stock levels from an inventory source when fetching
      allOf:
        - $ref: "#/components/schemas/InventoryItemBase"
        - type: object
          properties:
            warehouse_id:
              type: string
              description: Unique identifier for a warehouse or other location tracked in the source system.

    # ------------------------------------
    # Start inventory fetch request bodies
    # ------------------------------------

    FetchInventoryBySku:
      description: A request to fetch only inventory levels for the given SKUs.
      type: object
      required: [skus]
      properties:
        skus:
          $ref: '#/components/schemas/SkuIdentifiers'

    FetchInventoryByDate:
      description: A request to fetch only inventory levels changed since the given date.
      type: object
      required: [sinceDate]
      properties:
        sinceDate:
          $ref:  "#/components/schemas/DateTime"

    # ------------------------------------
    # Responses – shared operation schemas
    # ------------------------------------

    OperationReady:
      description: A completed fetch/push operation with data ready to be consumed.
      type: object
      properties:
        status:
          type: string
          enum: [READY]
          example: READY
        cursor:
          $ref:  "#/components/schemas/Cursor"
        message:
          type: string
          example: Poll immediately at `/fetch/cGFnZTozMDo6cGVyX3BhZ2U6NTAw`.

    OperationProcessing:
      description: A fetch/push operation that's still processing at the inventory source.
      type: object
      required: [status, cursor, message, poll_after_seconds]
      properties:
        status: 
          type: string
          enum: [PROCESSING]
          example: PROCESSING
        cursor:
          $ref:  "#/components/schemas/Cursor"
        message:
          type: string
          example: Poll at `/fetch/cGFnZTozMDo6cGVyX3BhZ2U6NTAw` after 10 seconds.
        poll_after_seconds:
          type: integer
          example: 10

    # ------------------------------------
    # Responses – fetch schemas
    # ------------------------------------

    FetchPaging:
      description: A completed fetch operation that still has more data for the client to consume.
      type: object
      required: [status, items, message, next_cursor]
      properties:
        status:
          type: string
          enum: [PAGING]
          example: PAGING
        items:
          type: array
          items:
            $ref:  "#/components/schemas/InventoryFetchItem"
        message:
          type: string
          example: Next page ready at `/fetch/cGFnZTozMDo6cGVyX3BhZ2U6NTAw`.
        next_cursor:
          $ref:  "#/components/schemas/Cursor"

    FetchDone:
      description: A completed fetch operation that has no further data to consume.
      type: object
      required: [status, items, message]
      properties:
        status:
          type: string
          enum: [DONE]
          example: DONE
        items:
          type: array
          items:
            $ref:  "#/components/schemas/InventoryFetchItem"
        message:
          type: string
          example: Operation complete – no further inventorydata to fetch.

    # ------------------------------------
    # Responses – push schemas
    # ------------------------------------

    PushPaging:
      description: A completed push operation that still has more data for the client to consume.
      type: object
      required: [status, skus_updated, message, next_cursor]
      properties:
        status:
          type: string
          enum: [PAGING]
          example: PAGING
        skus_updated:
          $ref:  "#/components/schemas/SkuIdentifiers"
        message:
          type: string
          example: Next page ready at `/push/cGFnZTozMDo6cGVyX3BhZ2U6NTAw`.
        next_cursor:
          $ref:  "#/components/schemas/Cursor"

    PushDone:
      description: A completed push operation that has no further data to consume.
      type: object
      required: [status, skus_updated, message]
      properties:
        status:
          type: string
          enum: [DONE]
          example: DONE
        skus_updated:
          $ref:  "#/components/schemas/SkuIdentifiers"
        message:
          type: string
          example: Operation complete – no further inventorydata to fetch.

    # ------------------------------------
    # Responses – errors
    # ------------------------------------

    Error:
      title: Error
      type: object
      required: [message]
      properties:
        transaction_id:
          type: string
        message:
          type: string
        detailed_errors:
          type: array
          items:
            type: object
            properties:
              external_error_code:
                type: string
              message:
                type: string
              external_http_status_code:
                type: string
              raw_external_context:
                type: string
              standardized_error_code:
                type: string
                enum:
                  - generic
                  - validation
                  - external_unauthorized_error
                  - external_server_error
                  - external_client_error
        retry_after_seconds:
          type: number
        retry_after_time:
          type: string
        throttling_context:
          type: object
      example:
        message: Throttled at inventory source, exceeded available query capacity
        transaction_id: 12345
        external_error_code: 429
        detailed_errors:
          - message: Calculated cost was 5400, but only 1200 units are currently available. (Restore Rate 100)
            external_http_status_code: 429

        retry_after_seconds: 42

  # -----------------
  # --- Responses ---
  # -----------------

  responses:
    OperationReady:
      description: A completed fetch/push operation with data ready to be consumed.
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/OperationReady"
          
    OperationProcessing:
      description: A fetch/push operation that's still processing at the inventory source.
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/OperationProcessing"

    FetchResults:
      description: Results from a completed fetch operation, either PAGING or DONE.
      content:
        application/json:
          schema:
            oneOf:
              - $ref:  "#/components/schemas/FetchPaging"
              - $ref:  "#/components/schemas/FetchDone"
            discriminator:
              propertyName: status
              mapping:
                PAGING: "#/components/schemas/FetchPaging"
                DONE: "#/components/schemas/FetchDone"

    PushResults:
      description: Results from a completed push operation, either PAGING or DONE.
      content:
        application/json:
          schema:
            oneOf:
              - $ref:  "#/components/schemas/PushPaging"
              - $ref:  "#/components/schemas/PushDone"
            discriminator:
              propertyName: status
              mapping:
                PAGING: "#/components/schemas/PushPaging"
                DONE: "#/components/schemas/PushDone"

    ErrorResponse:
      description: Any error response.
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/Error"

    NotSupportedResponse:
      description: Response when the requested operation is not supported by this Inventory App.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum: [This operation is not supported by this Inventory App. See app metadata details.]