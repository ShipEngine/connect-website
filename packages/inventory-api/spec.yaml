openapi: 3.0.0
info:
  title: Inventory API
  description: API specification for Inventory Apps in ShipEngine Connect.
  version: 0.0.1

paths:
  # ----------------------------
  # ---- Fetch Inventory -------
  # ----------------------------

  /fetch_inventory/full:
    post:
      summary: Fetch all stock levels
      operationId: FetchInventoryFull
      description: |
        Starts an operation to fetch all available stock levels from the 3rd-party inventory source or provider.

        Note: this operation must be supported by all Inventory Apps.
        
        ### Completion of operations
        How this operation completes will vary among 3rd-party inventory providers:
        1. **In-band responses**\
          Some providers will return results in-band, in which case the response will show `status: 'success'`.
          - If `has_more_data: false`, clients can consider the operation concluded.
          - If `has_more_data: true`, a `cursor` will be provided to allow clients to page through all result data.\
          In this scenario, clients should continue processing the remaining results via `GET /push_inventory/{cursor}`.\
          See notes on that route for follow-up actions.
        2. **Out-of-band responses**\
          Some inventory providers will return results out-of-band, in which case the response will show `status: 'pending'`.\

          In this scenario `status` will be `'pending'` and a `cursor` string will be provided. Clients should reuse this cursor
          at `GET /push_inventory/{cursor}` after waiting for the suggested `poll_after_seconds`.\
          See notes on that route for follow-up actions.
      tags: 
        - Fetch Inventory
      responses:
        '200':
          $ref: "#/components/responses/FetchInventoryResponse"

        '4XX':
          $ref: "#/components/responses/ErrorResponse"
          
  /fetch_inventory/partial:
    post:
      summary: Fetch only stock levels for particular SKUs
      operationId: FetchInventoryPartial
      description: |
        Starts an operation to fetch stock levels – only for the given SKUs – from the 3rd-party inventory source or provider.

        Note: this operation may not be supported by a given Inventory App.

        ### Completion of operations
        How this operation completes will vary among 3rd-party inventory providers:
        1. **In-band responses**\
          Some providers will return results in-band, in which case the response will show `status: 'success'`.
          - If `has_more_data: false`, clients can consider the operation concluded.
          - If `has_more_data: true`, a `cursor` will be provided to allow clients to page through all result data.\
          In this scenario, clients should continue processing the remaining results via `GET /push_inventory/{cursor}`.\
          See notes on that route for follow-up actions.
        2. **Out-of-band responses**\
          Some inventory providers will return results out-of-band, in which case the response will show `status: 'pending'`.\

          In this scenario `status` will be `'pending'` and a `cursor` string will be provided. Clients should reuse this cursor
          at `GET /push_inventory/{cursor}` after waiting for the suggested `poll_after_seconds`.\
          See notes on that route for follow-up actions.
      tags: 
        - Fetch Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - skus
              properties:
                skus:
                  $ref:  "#/components/schemas/SkuIdentifiers"
                
      responses:
        '200':
          $ref: "#/components/responses/FetchInventoryResponse"

        '4XX':
          $ref: "#/components/responses/ErrorResponse"

        '501':
          $ref:  "#/components/responses/NotSupportedResponse"

  /fetch_inventory/delta:
    post:
      summary: Fetch only stock levels changed after a given date
      operationId: FetchInventoryDelta
      description: |
        Starts an operation to fetch stock levels – only those changed since the given date – from the 3rd-party inventory source or provider.

        Note: this operation may not be supported by a given Inventory App.

        ### Completion of operations
        How this operation completes will vary among 3rd-party inventory providers:
        1. **In-band responses**\
          Some providers will return results in-band, in which case the response will show `status: 'success'`.
          - If `has_more_data: false`, clients can consider the operation concluded.
          - If `has_more_data: true`, a `cursor` will be provided to allow clients to page through all result data.\
          In this scenario, clients should continue processing the remaining results via `GET /push_inventory/{cursor}`.\
          See notes on that route for follow-up actions.
        2. **Out-of-band responses**\
          Some inventory providers will return results out-of-band, in which case the response will show `status: 'pending'`.\

          In this scenario `status` will be `'pending'` and a `cursor` string will be provided. Clients should reuse this cursor
          at `GET /push_inventory/{cursor}` after waiting for the suggested `poll_after_seconds`.\
          See notes on that route for follow-up actions.
      tags: 
        - Fetch Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sinceDate
              properties:
                sinceDate:
                  $ref:   "#/components/schemas/DateTime"
      responses:
        '200':
          $ref: "#/components/responses/FetchInventoryResponse"

        '4XX':
          $ref: "#/components/responses/ErrorResponse"

        '501':
          $ref:  "#/components/responses/NotSupportedResponse"

  /fetch_inventory/{cursor}:
    get:
      summary: Get results from fetch operations
      description: |
        Use this endpoint for either of:

        1. **Checking the status of out-of-band / long-running operations**
          - If a response yields `status: 'pending'`, await the suggested `poll_after_seconds` and repeat polling with the given `cursor`.
          - If a response yields `status: 'success'`, result data will appear in `inventory_items`. Continue to item #2, below ⬇
        2. **Paging through the result data of completed operations**
          - If `status: 'success'` and `has_more_data: false`, the operation is concluded and no more data is available.
          - If `has_more_data: true`, clients should page through the rest of the result data by reusing the given `cursor` values.
          - Clients ⬆ should continue paging with each new `cursor` until `has_more_data: false` appears.
          At this point, all result data has been consumed and the operation can be considered concluded.
        
      tags:
        - Fetch Inventory
      parameters:
        - in: path
          required: true
          name: cursor
          schema:
            $ref: '#/components/schemas/Cursor'
      responses:
        '200':
          $ref: '#/components/responses/FetchInventoryResponse'
        '4XX':
          $ref: "#/components/responses/ErrorResponse"

  # ----------------------------
  # ---- Push Inventory --------
  # ----------------------------

  /push_inventory:
    post:
      summary: Push new stock levels to inventory source
      operationId: PushInventory
      tags:
        - Push Inventory
      description: |
        Starts an operation to push new or updated stock levels to the 3rd-party inventory source or provider.

        Note: this operation may not be supported by a given Inventory App.

        ### Completion of operations
        How this operation completes will vary among 3rd-party inventory providers:
        1. **In-band responses**\
          Some providers will return results in-band, in which case the response will show `status: 'success'`.
          - If `has_more_data: false`, clients can consider the operation concluded.
          - If `has_more_data: true`, a `cursor` will be provided to allow clients to page through all result data.\
          In this scenario, clients should continue processing the remaining results via `GET /push_inventory/{cursor}`.\
          See notes on that route for follow-up actions.
        2. **Out-of-band responses**\
          Some inventory providers will return results out-of-band, in which case the response will show `status: 'pending'`.\

          In this scenario `status` will be `'pending'` and a `cursor` string will be provided. Clients should reuse this cursor
          at `GET /push_inventory/{cursor}` after waiting for the suggested `poll_after_seconds`.\
          See notes on that route for follow-up actions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/InventoryItemBase"
      responses:
        '200':
          $ref:  "#/components/responses/PushInventoryResponse"
          
        '4XX':
          $ref: "#/components/responses/ErrorResponse"

        '501':
          $ref:  "#/components/responses/NotSupportedResponse"

  /push_inventory/{cursor}:
    get:
      summary: Get results from push operations
      description: |
        Use this endpoint for either of:

        1. **Checking the status of out-of-band / long-running operations**
          - If a response yields `status: 'pending'`, await the suggested `poll_after_seconds` and repeat polling with the given `cursor`.
          - If a response yields `status: 'success'`, result data will appear in `skus_updated`. Continue to item #2, below ⬇
        2. **Paging through the result data of completed operations**
          - If `status: 'success'` and `has_more_data: false`, the operation is concluded and no more data is available.
          - If `has_more_data: true`, clients should page through the rest of the result data by reusing the given `cursor` values.
          - Clients ⬆ should continue paging with each new `cursor` until `has_more_data: false` appears.
          At this point, all result data has been consumed and the operation can be considered concluded.
      tags:
        - Push Inventory
      parameters:
        - in: path
          required: true
          name: cursor
          schema:
            $ref: '#/components/schemas/Cursor'
      responses:
        '200':
          $ref: "#/components/responses/PushInventoryResponse"
        '4XX':
          $ref: "#/components/responses/ErrorResponse"

# ----------------------
# ---- Security --------
# ----------------------

security:
  - RequestAuth: []

# ----------------------
# ---- Components ------
# ----------------------

components:
  securitySchemes:
    RequestAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        This header – a base64-encoded string – must be applied with every request. Inventory Apps expect to decode this header
        into an object containing auth credentials for the 3rd-party API that serves as the inventory source / provider.

        ### Generating this key:

        Clients should start with a `credentials` object containing auth information for the inventory source.
        *Documentation is forthcoming* on the expected starting shape of `credentials` for various inventory sources.
        From there, simply stringify the object to JSON, and base64-encode it.

  schemas:
    Cursor:
      description: An opaque string which should be passed back in the next request – for paging / polling.
      type: string
      example: cGFnZTozMDo6cGVyX3BhZ2U6NTAw

    DateTime:
      type: string
      description: Reusable schema for any serialized date-time string
      format: date-time
      example: 2021-01-01T08:30:00+0000

    # -------------------------
    # --- Inventory models ----
    # -------------------------

    SkuIdentifiers:
      type: array
      description: A list of SKU identifiers, corresponding to specific products
      example: ['t-shirt', 'mug', 'bouncy-ball']
      items:
        type: string

    InventoryItemBase:
      type: object
      description: Common / shared properties for InventoryItems, regardless of whether receiving data (fetch) or sending it (push) 
      required:
        - sku
        - integration_entity_id
        - fetched_at
        - available_quantity
      properties:
        sku:
          type: string
          example: t-shirt-small-red
          description: The merchant-supplied identifier for the product.
        integration_entity_id:
          type: string
          example: t-shirt-small-red
          description: The unique inventory record in the *source* system. This will often be the same as the SKU, but could be different in inventory source platforms that allow duplicate SKUs.
        fetched_at:
          type: string
          description: DateTime representing when these inventory quantities were fetched from the source.
          format: date-time
          example: 2021-01-01T08:30:00+0000
        updated_at:
          type: string
          description: DateTime representing when these inventory quantities were last updated at the source (if available).
          format: date-time
          example: 2021-01-01T08:15:00+0000
        available_quantity:
          type: integer
          example: 15
        allocated_quantity:
          type: integer
          example: 2
        onhand_quantity:
          type: integer
          example: 5
        committed_quantity:
          type: integer
          example: 1
      example:
        sku: t-shirt-small-red
        integration_entity_id: t-shirt-small-red
        fetched_at: 2021-01-01T08:30:00+0000
        updated_at: 2021-01-01T08:20:00+0000
        available_quantity: 20
        allocated_quantity: 2

    InventoryFetchItem:
      description: The reported stock levels from an inventory source when fetching
      allOf:
        - $ref: "#/components/schemas/InventoryItemBase"
        - type: object
          properties:
            warehouse_id:
              type: string
              description: Unique identifier for a warehouse or other location tracked in the source system.

    # -------------------------------
    # InventoryFetch response schemas
    # -------------------------------

    InventoryFetchSuccess:
      description: |
        Response shape for a successful inventory fetch request.
        - If all results fit into a single response, `cursor` will be omitted and `has_more_data` will be false.
        - If the total result set requires paging, clients should capture the provided `cursor` and pass it to `GET /fetch_inventory/{cursor}`, repeating with each successive cursor until `has_more_data` is false. 
      type: object
      required:
        - inventory_items
        - status
        - has_more_data
      properties:
        status:
          type: string
          enum: [success]
        inventory_items:
          type: array
          items:
            $ref: "#/components/schemas/InventoryFetchItem"
        has_more_data:
          type: boolean
        cursor:
          $ref: "#/components/schemas/Cursor"
      example:
        status: success
        inventory_items:
          - sku: t-shirt-small-red
            integration_entity_id: t-shirt-small-red
            fetched_at: 2021-01-01T08:30:00+0000
            updated_at: 2021-01-01T08:20:00+0000
            available_quantity: 20
            allocated_quantity: 2
          - sku: blue-shoes-8.5
            integration_entity_id: blue-shoes-8.5
            fetched_at: 2021-01-15T08:30:00+0000
            updated_at: 2021-01-15T08:20:00+0000
            available_quantity: 40
            onhand_quantity: 50
        has_more_data: true
        cursor: cGFnZTozMDo6cGVyX3BhZ2U6NTAw

    InventoryFetchPending:
      description: Response shape for a pending inventory fetch request.
      type: object
      required:
        - status
        - cursor
        - poll_after_seconds
      properties:
        status:
          type: string
          enum: [pending]
        cursor:
          $ref:  "#/components/schemas/Cursor"
        poll_after_seconds:
          type: integer
          description: A suggested wait time before clients should poll with the given cursor to check on completion.
          example: 10
      example:
        status: pending
        poll_after_seconds: 10
        cursor: cGFnZTozMDo6cGVyX3BhZ2U6NTAw

    InventoryFetchFailure:
      description: Response shape for a failed inventory fetch request.
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [failure]
        error:
          $ref:  "#/components/schemas/Error"
      example:
        status: failure
        error: "#components/schemas/Error/example"

    # ------------------------------
    # InventoryPush response schemas
    # ------------------------------

    InventoryPushSuccess:
      description: Response shape for a successful `push_inventory` operation
      type: object
      required:
        - has_more_data
        - skus_updated
      properties:
        transaction_id:
          type: string
          description: A unique identifier for the completed operation, which may refer to a resource
                      at the inventory source, such as a feed or document ID.
          example: abcd-1234
        skus_updated:
          $ref:  "#/components/schemas/SkuIdentifiers"
        has_more_data:
          type: boolean
        cursor:
          $ref: "#/components/schemas/Cursor"
      example:
        transaction_id: abcd-1234
        skus_updated: [t-shirt-small-red, blue-shoe-8.5]
        has_more_data: false

    InventoryPushPending:
      description: Response shape for a pending or long-running `push_inventory` operation
      type: object
      required:
        - status
        - cursor
        - poll_after_seconds
      properties:
        status:
          type: string
          enum: [pending]
        cursor:
          $ref:  "#/components/schemas/Cursor"
        poll_after_seconds:
          type: integer
          description: A suggested wait time before clients should poll with the given cursor to check on completion.
          example: 10
      example:
        status: pending
        poll_after_seconds: 10
        cursor: cGFnZTozMDo6cGVyX3BhZ2U6NTAw


    # ---------------
    # --- Errors ----
    # ---------------

    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: Summary of what went wrong.
          type: string
        transaction_id:
          description: Unique identifier for the request or operation that produced the error, if available.
          type: string
        external_error_code:
          type: integer
          description: Error code received from the remote inventory source
        details:
          description: Additional detail about what went wrong.
          type: string
        retry_after_seconds:
          description: A suggested wait interval before the request should be retried, if applicable.
          type: number
      example:
        message: Throttled due to exceeding available query capacity
        transaction_id: 12345
        external_error_code: 429
        details: Calculated cost was 5400, but only 1200 units are currently available. (Restore Rate 100)
        retry_after_seconds: 42

  # -----------------
  # --- Responses ---
  # -----------------

  responses:
    FetchInventoryResponse:
      description: A successful or pending response for any `fetch_inventory` operation.
      content:
        application/json:
          schema:
            oneOf:
              - $ref:  "#/components/schemas/InventoryFetchSuccess"
              - $ref:  "#/components/schemas/InventoryFetchPending"
            discriminator:
              propertyName: status
              mapping:
                success: "#/components/schemas/InventoryFetchSuccess"
                pending: "#/components/schemas/InventoryFetchPending"

    FetchInventoryErrorResponse:
      description: An error response  for a `fetch_inventory` operation
      content:
        application/json:
          schema:
            $ref:  "#/components/schemas/InventoryFetchFailure"

    PushInventoryResponse:
      description: A successful response for a `push_inventory` operation
      content:
        application/json:
          schema:
            oneOf:
              - $ref:   "#/components/schemas/InventoryPushSuccess"
              - $ref:   "#/components/schemas/InventoryPushPending"
            discriminator:
              propertyName: status
              mapping:
                success: "#/components/schemas/InventoryPushSuccess"
                pending: "#/components/schemas/InventoryPushPending"

    ErrorResponse:
      description: Any standardized Error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotSupportedResponse:
      description: Responses for inventory operations that are not supported by a particular Inventory App.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum: [This operation is not supported by this Inventory App. See app metadata details.]