name: Manage Releases

env:
  IS_VALID_COMMENT: ${{ github.event.comment && startsWith(github.event.comment.body, 'increment') }}
  IS_APPROVED_PR: ${{ github.event.pull_request_review && github.event.pull_request_review.state == 'APPROVED' }}

on:
  issue_comment:
    types:
      - created
      - edited
  pull_request_review:
    types:
      - submitted
      - edited

jobs:
  release:
    if: ${{ github.event.issue.pull_request && ((github.event.comment && startsWith(github.event.comment.body, 'increment')) || (github.event.pull_request_review && github.event.pull_request_review.state == 'APPROVED')) }}
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Parse Comment
        id: parse
        env:
          COMMENT: ${{ github.event.comment && github.event.comment.body || '' }}
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            let [keyword, release_type] = process.env.COMMENT.split(' ');
            const result = {
              comment_id: '',
              release_type: release_type || 'patch'
            };
            try {
              const response = await github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸ¤– Initiating ${result.release_type} version increments for affected packages...`
              });
              core.debug(response);
              result.comment_id = response.id;
              core.debut(`Comment ID: ${response.id}`);
            } catch (err) {
              core.warning(`Unable to create comment on PR: ${err}`);
            }
            return result;

      - name: Lookup PR
        id: pr_info
        uses: actions/github-script@v3
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            };
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`);
            try {
              const result = await github.pulls.get(request);
              return result.data;
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ fromJSON(steps.pr_info.outputs.result).head.ref }}

      - name: Configure git identity
        run: |
          # Configure git for commits
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          always-auth: true
          node-version: 14

      - name: Install dependencies
        run: yarn install --immutable

      - name: Bump Versions
        id: bump
        env:
          BASE_REF: ${{ fromJSON(steps.pr_info.outputs.result).base.ref }}
          COMMENT_ID: ${{ fromJSON(steps.parse.outputs.result).comment_id }}
        uses: actions/github-script@v3
        with:
          script: |
            const { promisify } = require('util');
            const exec  = promisify(require('child_process').exec);
            let action = 'Incremented';
            let body = 'ðŸ¤– No packages need bumping.';
            let help = '';
            let flags = '';
            let result = {};
            if (process.env.IS_VALID_COMMENT != 'true') {
              action = 'Missing expected';
              help = '\n\nAdd a comment on this PR with `increment <patch|minor|major|prerelease|decline> versions` before merging.';
              flags = ' --dry-run';
            }
            try {
              const { stdout, stderr } = await exec(`yarn run version:bump:all ${{ fromJSON(steps.parse.outputs.result).release_type }} --json${flags}`);
              core.info(`Increment results: ${stdout}`);
              result = JSON.parse(stdout);
              core.debug(result);
              if (result.packages.length > 0) {
                body = `ðŸ¤– ${action} ${result.options.bumpType} versions for ${result.packages.join(', ')}.${help}`;
              }
              if (process.env.COMMENT_ID) {
                await github.issues.updateComment({
                  comment_id: process.env.COMMENT_ID,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body
                });
              } else {
                await github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body
                });
              }
            } catch (err) {
              core.setFailed(`Action failed with error ${err}`);
            }
            return result;

      - name: Increment version
        if: ${{ env.IS_VALID_COMMENT == 'true' }}
        env:
          PACKAGES: ${{ join(fromJSON(steps.bump.outputs.result).packages, ', ') }}
        run: |
          # Increment package version(s)
          commit_msg="ðŸ¤– ${{ fromJSON(steps.bump.outputs.result).options.bumpType }} release ðŸ“¦(s)"
          if [[ -n "${PACKAGES}" ]]; then
            commit_msg="${commit_msg}: ${PACKAGES}"
          fi
          set -e
          yarn version apply --all
          git commit -a -m "${commit_msg}"
          git push
