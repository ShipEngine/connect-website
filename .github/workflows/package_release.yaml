name: Manage Releases

env:
  IS_VALID_COMMENT: ${{ github.event.comment && startsWith(github.event.comment.body, 'release') }}
  IS_APPROVED_PR: ${{ github.event.pull_request_review && github.event.pull_request_review.state == 'APPROVED' }}

on:
  issue_comment:
    types:
      - created
  pull_request_review:
    types:
      - created

jobs:
  release:
    if: ${{ github.event.issue.pull_request && ((github.event.comment && startsWith(github.event.comment.body, 'release')) || (github.event.pull_request_review && github.event.pull_request_review.state == 'APPROVED')) }}
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - id: pr_info
        name: Lookup PR
        uses: actions/github-script@v3
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ fromJSON(steps.pr_info.outputs.result).head.ref }}

      - name: Configure git identity
        run: |
          # Configure git for commits
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          always-auth: true
          node-version: 14

      - name: Install dependencies
        run: yarn install --immutable

      - id: parse
        name: Parse comment
        if: ${{ env.IS_VALID_COMMENT == 'true' }}
        env:
          COMMENT: ${{ github.event.comment.body }}
        run: |
          # If an optional comma-separated list of packages has
          # been provided, commit those releases.
          set -x

          IFS=' ' read -ra words <<< "${COMMENT}"
          set -- "${words[@]}"
          shift
          package_names=$1
          shift
          export BUMP_RELEASE_TYPE=${1:-patch}
          echo "::set-output name=package_names::${package_names}"

          IFS=',' read -ra packages <<< "${package_names}"
          for package_name in "${packages[@]}"; do
            package_directory=packages/${package_name}
            if [[ -n "${package_name}" ]] && [[ -d "${package_directory}" ]]; then
              cd "${package_directory}"
              yarn run bump
              cd -
            fi
          done
        shell: bash

      - id: validate
        name: Validate
        uses: actions/github-script@v3
        with:
          script: |
            // Running `yarn version check` as a child process because
            // passing multiline output between steps is awkward.
            const exec = require('child_process').exec
            exec('yarn version check', (error, stdout, stderr) => {
              if (error) {
                github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '```\n' + stdout + '```\n'
                })
              }
            })
        env:
          BASE_REF: ${{ fromJSON(steps.pr_info.outputs.result).base.ref }}


      - name: Increment version
        if: ${{ env.IS_VALID_COMMENT == 'true' }}
        run: |
          # Increment package version(s)
          if [[ -n "${PACKAGES}" ]]; then
            commit_msg="ðŸ¤– release ðŸ“¦(s): ${PACKAGES}"
          else
            commit_msg="ðŸ¤– release ðŸ“¦(s)"
          fi
          set -e
          yarn version apply --all
          git commit -a -m "${commit_msg}"
          git push
        env:
          PACKAGES: ${{ steps.parse.outputs.package_names }}
