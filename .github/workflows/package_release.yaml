name: Manage Releases

on:
  issue_comment:
    types:
      - created

jobs:
  release:
    if: github.event.issue.pull_request && github.event.issue.user.id == github.event.comment.user.id && startsWith(github.event.comment.body, 'release')
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - id: pr_info
        name: Lookup PR
        uses: actions/github-script@v3
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ fromJSON(steps.pr_info.outputs.result).head.ref }}

      - id: validate
        name: Validate Inputs
        env:
          COMMENT: ${{ github.event.comment.body }}
        run: |
          set -x
          IFS=' '
          read -ra words <<< "${COMMENT}"
          set -- "${words[@]}"
          shift
          package_name=$1
          shift
          release_type=${1:-patch}
          package_directory=packages/${package_name}
          echo "PACKAGE_DIRECTORY=${package_directory}" >> $GITHUB_ENV
          if [[ -n "${package_name}" ]] && [[ -d "${package_directory}" ]]; then
            echo "::set-output name=is_valid::true"
          else
            echo "::set-output name=is_valid::false"
            echo "::debug::Invalid package: ${package_name}"
          fi
          echo "::set-output name=package_name::${package_name}"
          echo "::set-output name=release_type::${release_type}"
        shell: bash

      - name: Alert
        if: steps.validate.outputs.is_valid == 'false'
        uses: actions/github-script@v3
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– Invalid ðŸ“¦ name `${{ steps.validate.outputs.package_name }}` in [comment#${{ github.event.comment.id }}](${{ github.event.comment.html_url }}).'
            })

      - name: Install Node
        uses: actions/setup-node@v2
        if: steps.validate.outputs.is_valid == 'true'
        with:
          always-auth: true
          node-version: 14

      - name: Install dependencies
        if: steps.validate.outputs.is_valid == 'true'
        run: yarn install --frozen-lockfile

      - name: Increment version
        if: steps.validate.outputs.is_valid == 'true'
        working-directory: ${{ env.PACKAGE_DIRECTORY }}
        run: |
          # Configure git for commits
          date > generated.txt
          git config user.name github-actions
          git config user.email github-actions@github.com
          # Increment package version
          yarn run release
        env:
          BUMP_RELEASE_TYPE: ${{ steps.validate.outputs.release_type }}
          PACKAGE_NAME: ${{ steps.validate.outputs.package_name }}
